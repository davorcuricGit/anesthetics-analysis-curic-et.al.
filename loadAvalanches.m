%Sample code
%Davor Curic, 2023, Complexity Science Group, University of Calgary
%
%This code loads the avalanche analysis and calculates critical exponents
%tau, alpha, gamma, and the scaling relation
%This code requires pvcalc and plmle from the NCC toolbox
%https://github.com/nctoolbox/nctoolbox


FR = 50;

%this file is generated by 'generateAvalanches.m'
load('samplerecording_avalanches.mat')
load("mask.mat")
corticalPixels = find(mask == 1); %these are the pixels corresponding to the cortical surface

avSize = avalanches{1};
avTime = avalanches{2};


%generate the list of avalanches
S = [];
D = [];
for i = 1:length(avSize);
    %S is normalized by the number of pixels PER hemisphere (hence the /2)
    S = [S avSize{i}'/(length(corticalPixels)/2)];
    D = [D avTime{i}/FR];
end


clear avSize avTime avalanches mask


%These are chosen such as they are the largest range supporting pvalue >=
%0.1
smin = 0.002; smax = smin*900;
dmin = 2/FR; dmax = 13*dmin;

nrows = 1;
ncols = 4;


clf

%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%% Avalanche Sizes
%%%%%%%%%%%%%%%%%%%%%%%%%
%logarithmically bin avalanche sizes and plot them


subplot(nrows, ncols, 1)
[md, fq] = logbinning(S,1.2, 'cont');
loglog(md, fq, 'displayname', 'S')
hold on

tau = plmle(S(S >= smin & S<= smax));
pvtau = pvcalc(S, tau, 'xmin', smin, 'xmax', smax);
%plmle does not return an uncertainty, in the manuscript we take the
%unvertainty to be the variation of the exponent across all recordings in a
%group. Here we will assume 5% uncertainty, which is fairly representative of observed uncertainty, for demonstation purposes.
dtau = 0.05*tau;


%plot the exponent for reference
md = loglinspace(smin, smax, 10);
loglog(md, md.^-tau, '--k', 'displayname', ['\tau=' num2str(tau,3) '\pm' num2str(dtau,1)])

legend('Location','southwest')
xlabel('Size, S')
ylabel('P(S)')

%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%% Avalanche Durations
%%%%%%%%%%%%%%%%%%%%%%%%%
%repeat as above. Note durations are discrete and need to be treated
%accordingly

subplot(nrows, ncols, 2)
[md, fq] = logbinning(round(D*FR),1.2, 'disc');
loglog(md/FR, fq*FR, 'displayname', 'T')
hold on


alpha = plmle(round(D(D >= dmin & D<= dmax)*FR));
pvalpha = pvcalc(round(D*FR), alpha, 'xmin', dmin*FR, 'xmax', dmax*FR);
dalpha = 0.05*alpha;

%plot the exponent for reference
md = loglinspace(dmin, dmax, 10);
loglog(md, 0.1*md.^-alpha, '--k', 'displayname', ['\alpha=' num2str(alpha,3) '\pm' num2str(dalpha,1)])
legend('Location','southwest')
xlabel('Duration, T (s)')
ylabel('P(T)')

%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%Plot avalanche size vs duration
%%%%%%%%%%%%%%%%%%%%%%%%%

subplot(nrows, ncols, 3)
loglog(S, D, '.')
hold on

%get the mean duration for given size between smin,smax,dmin,dmax
idx1 = find(S < smax & S > smin); idx2 = find(D < dmax & D > dmin);
idx = intersect(idx1, idx2);

ss = S(idx); dd = D(idx);

md = logbinning(ss, 1.2, 'cont');
for i = 1:length(md)-1
    idx = find(ss > md(i) & ss < md(i + 1));
    avg(i) = mean(dd(idx));
end
md = md(2:end) - diff(md)/2;
loglog(md, avg , '.r', 'markersize',10)


%calculate gamma from fitting to average duration for given size
[b stats] = robustfit(log10(md), log10(avg));
gamma = b(2);
dgamma = stats.s; clear stats b
loglog(md, 0.3*md.^gamma, '--k')

ylabel('T (s)')
xlabel('S')

clear ss dd avg idx idx1 idx2

%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%scaling relation
%%%%%%%%%%%%%%%%%%%%%%%%%

%calculate gamma from the scaling relation
gamma2 = (tau - 1)/(alpha-1);
dgamma2 = getdgamma(tau, alpha, dtau, dalpha);
loglog(md, 0.3*md.^gamma2, '-.k')

%plot the two gammas and see if they overlap.
subplot(nrows, ncols, 4)
errorbar(1, gamma, dgamma)
hold on
errorbar(2, gamma2, dgamma2)
xlim([0 3])

%ylabel('\gamma')
set(gca,'xtick',[1:2],'xticklabel',{'\gamma', '\gamma(\alpha, \tau)'})


for i = 1:nrows*ncols
    subplot(nrows, ncols, i)
    set(gca,'fontsize', 15)
end
clear md fq i

function dgamma = getdgamma(tau, alpha, dtau, dalpha)
    %use error propagation formula to get uncertainty on gamma
    t1 = 1/(alpha - 1)^2*dtau^2;
    t2 = (tau - 1)^2/(alpha - 1)^4*dalpha^2;
    dgamma = (t1 + t2)^(1/2);
end





